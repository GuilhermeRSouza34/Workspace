import { ChangeDetectionStrategy, Component, forwardRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoCheckboxBaseComponent } from './po-checkbox-base.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../../po-label/po-label.component";
const _c0 = ["checkboxLabel"];
function PoCheckboxComponent_po_label_3_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelement(0, "po-label", 4, 5);
} if (rf & 2) {
    const ctx_r0 = i0.ɵɵnextContext();
    i0.ɵɵproperty("p-disabled", ctx_r0.disabled)("p-for", ctx_r0.id)("p-label", ctx_r0.label);
} }
/**
 * @docsExtends PoCheckboxBaseComponent
 *
 * @example
 *
 * <example name="po-checkbox-basic" title="PO Checkbox Basic">
 *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.html"> </file>
 *   <file name="sample-po-checkbox-basic/sample-po-checkbox-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-labs" title="PO Checkbox Labs">
 *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.html"> </file>
 *   <file name="sample-po-checkbox-labs/sample-po-checkbox-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-checkbox-acceptance-term" title="PO Checkbox - Acceptance Term">
 *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.html"> </file>
 *   <file name="sample-po-checkbox-acceptance-term/sample-po-checkbox-acceptance-term.component.ts"> </file>
 * </example>
 */
export class PoCheckboxComponent extends PoCheckboxBaseComponent {
    constructor(changeDetector) {
        super();
        this.changeDetector = changeDetector;
    }
    /**
     * Função que atribui foco ao *checkbox*.
     *
     * Para utilizá-la é necessário capturar a referência do componente no DOM através do `ViewChild`, como por exemplo:
     *
     * ```
     * ...
     * import { ViewChild } from '@angular/core';
     * import { PoCheckboxComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoCheckboxComponent, { static: true }) checkbox: PoCheckboxComponent;
     *
     * focusCheckbox() {
     *   this.checkbox.focus();
     * }
     * ```
     */
    focus() {
        if (this.checkboxLabel && !this.disabled) {
            this.checkboxLabel.nativeElement.focus();
        }
    }
    onBlur() {
        this.onTouched?.();
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
    }
    onKeyDown(event, value) {
        if (event.which === PoKeyCodeEnum.space || event.keyCode === PoKeyCodeEnum.space) {
            this.checkOption(value);
            event.preventDefault();
        }
    }
    changeModelValue(value) {
        if (value === null) {
            this.checkboxValue = 'mixed';
        }
        else {
            this.checkboxValue = typeof value === 'boolean' || value === null ? value : false;
        }
        this.changeDetector.detectChanges();
    }
}
PoCheckboxComponent.ɵfac = function PoCheckboxComponent_Factory(t) { return new (t || PoCheckboxComponent)(i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoCheckboxComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoCheckboxComponent, selectors: [["po-checkbox"]], viewQuery: function PoCheckboxComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.checkboxLabel = _t.first);
    } }, features: [i0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => PoCheckboxComponent),
                multi: true
            }
        ]), i0.ɵɵInheritDefinitionFeature], decls: 4, vars: 9, consts: [[1, "container-po-checkbox", 3, "click", "keydown"], ["role", "checkbox", 1, "po-checkbox-outline", 3, "tabindex"], ["aria-label", " ", 1, "po-checkbox", 3, "id"], ["class", "po-checkbox-label", "tabindex", "-1", 3, "p-disabled", "p-for", "p-label", 4, "ngIf"], ["tabindex", "-1", 1, "po-checkbox-label", 3, "p-disabled", "p-for", "p-label"], ["checkboxLabel", ""]], template: function PoCheckboxComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "div", 0);
        i0.ɵɵlistener("click", function PoCheckboxComponent_Template_div_click_0_listener() { return ctx.checkOption(ctx.checkboxValue); })("keydown", function PoCheckboxComponent_Template_div_keydown_0_listener($event) { return ctx.onKeyDown($event, ctx.checkboxValue); });
        i0.ɵɵelementStart(1, "div", 1);
        i0.ɵɵelement(2, "span", 2);
        i0.ɵɵtemplate(3, PoCheckboxComponent_po_label_3_Template, 2, 3, "po-label", 3);
        i0.ɵɵelementEnd()();
    } if (rf & 2) {
        i0.ɵɵattribute("checked", ctx.checkboxValue);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("tabindex", ctx.disabled ? -1 : 0);
        i0.ɵɵattribute("p-size", ctx.size)("aria-checked", ctx.checkboxValue);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("id", ctx.id);
        i0.ɵɵattribute("aria-checked", ctx.checkboxValue)("aria-disabled", ctx.disabled)("required", ctx.checkBoxRequired);
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngIf", ctx.label);
    } }, dependencies: [i1.NgIf, i2.PoLabelComponent], encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoCheckboxComponent, [{
        type: Component,
        args: [{ selector: 'po-checkbox', changeDetection: ChangeDetectionStrategy.OnPush, providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => PoCheckboxComponent),
                        multi: true
                    }
                ], template: "<div\n  class=\"container-po-checkbox\"\n  [attr.checked]=\"checkboxValue\"\n  (click)=\"checkOption(checkboxValue)\"\n  (keydown)=\"onKeyDown($event, checkboxValue)\"\n>\n  <div\n    role=\"checkbox\"\n    class=\"po-checkbox-outline\"\n    [attr.p-size]=\"size\"\n    [tabindex]=\"disabled ? -1 : 0\"\n    [attr.aria-checked]=\"checkboxValue\"\n  >\n    <span\n      [attr.aria-checked]=\"checkboxValue\"\n      aria-label=\" \"\n      [id]=\"id\"\n      class=\"po-checkbox\"\n      [attr.aria-disabled]=\"disabled\"\n      [attr.required]=\"checkBoxRequired\"\n    >\n    </span>\n\n    <po-label\n      #checkboxLabel\n      *ngIf=\"label\"\n      class=\"po-checkbox-label\"\n      tabindex=\"-1\"\n      [p-disabled]=\"disabled\"\n      [p-for]=\"id\"\n      [p-label]=\"label\"\n    >\n    </po-label>\n  </div>\n</div>\n" }]
    }], function () { return [{ type: i0.ChangeDetectorRef }]; }, { checkboxLabel: [{
            type: ViewChild,
            args: ['checkboxLabel', { static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,
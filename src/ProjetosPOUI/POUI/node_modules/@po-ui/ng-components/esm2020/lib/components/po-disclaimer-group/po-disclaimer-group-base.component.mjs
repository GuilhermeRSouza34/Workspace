import { EventEmitter, Input, Output, Directive } from '@angular/core';
import { convertToBoolean, isKeyCodeEnter, uuid } from '../../utils/util';
import { poLocaleDefault } from '../../services/po-language/po-language.constant';
import * as i0 from "@angular/core";
import * as i1 from "../../services/po-language/po-language.service";
export const poDisclaimerGroupLiteralsDefault = {
    en: { removeAll: 'Remove all' },
    es: { removeAll: 'Eliminar todos' },
    pt: { removeAll: 'Remover todos' },
    ru: { removeAll: 'Удалить все' }
};
/**
 * @description
 *
 * O componente `po-disclaimer-group` é recomendado para manipular palavras-chave de filtros aplicados em uma pesquisa.
 *
 * À partir de dois *disclaimers* com o botão **fechar** habilitado, o componente renderiza de forma automática um novo e destacado
 * *disclaimer* que possibilita **remover todos**, mas que também pode ser desabilitado.
 *
 * Também é possível navegar entre os *disclaimers* através do teclado utilizando a tecla *tab* e, para remoção do *disclaimer* selecionado,
 * basta pressionar a tecla *enter*. Esta funcionalidade não se aplica caso a propriedade `hideClose` estiver habilitada.
 *
 * > Veja a integração destas funcionalidade no componente [po-page-list](/documentation/po-page-list).
 */
export class PoDisclaimerGroupBaseComponent {
    constructor(differs, languageService, changeDetector) {
        this.changeDetector = changeDetector;
        /**
         * @optional
         *
         * @description
         *
         * Função que será disparada quando a lista de *disclaimers* for modificada.
         */
        this.change = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Função que será disparada quando um *disclaimer* for removido da lista de *disclaimers* pelo usuário.
         *
         * Recebe como parâmetro um objeto conforme a interface `PoDisclaimerGroupRemoveAction`.
         */
        this.remove = new EventEmitter();
        /**
         * @optional
         *
         * @description
         *
         * Função que será disparada quando todos os *disclaimers* forem removidos da lista de *disclaimers* pelo usuário,
         * utilizando o botão "remover todos".
         *
         * Recebe como parâmetro uma lista contendo todos os `disclaimers` removidos.
         */
        this.removeAll = new EventEmitter();
        this._disclaimers = [];
        this._hideRemoveAll = false;
        this.previousDisclaimers = [];
        const language = languageService.getShortLanguage();
        this.differ = differs.find([]).create(null);
        this.literals = {
            ...poDisclaimerGroupLiteralsDefault[poLocaleDefault],
            ...poDisclaimerGroupLiteralsDefault[language]
        };
    }
    /** Lista de *disclaimers*. */
    /**
     * @description
     *
     * Lista de *disclaimers*.
     *
     * Para que a lista de *disclaimers* seja atualizada dinamicamente deve-se passar uma nova referência do array de `PoDisclaimer`.
     *
     * Exemplo adicionando um *disclaimer* no array:
     *
     * ```
     * this.disclaimers = [...this.disclaimers, disclaimer];
     * ```
     *
     * ou
     *
     * ```
     * this.disclaimers = this.disclaimers.concat(disclaimer);
     * ```
     */
    set disclaimers(value) {
        this.previousDisclaimers = [...this.disclaimers];
        this._disclaimers = this.checkDisclaimers(value);
    }
    get disclaimers() {
        return this._disclaimers;
    }
    /**
     * @optional
     *
     * @description
     *
     * Oculta o botão para remover todos os *disclaimers* do grupo.
     *
     * > Por padrão, o mesmo é exibido à partir de dois ou mais *disclaimers* com a opção `hideClose` habilitada.
     *
     * @default `false`
     */
    set hideRemoveAll(value) {
        this._hideRemoveAll = value === '' ? true : convertToBoolean(value);
    }
    get hideRemoveAll() {
        return this._hideRemoveAll;
    }
    ngDoCheck() {
        this.checkChanges();
    }
    onCloseAction(disclaimer) {
        this.removeDisclaimer(disclaimer);
        this.emitChangeDisclaimers();
        this.remove.emit({
            removedDisclaimer: { ...disclaimer },
            currentDisclaimers: [...this.disclaimers]
        });
    }
    isRemoveAll() {
        return !this.hideRemoveAll && this.disclaimers.filter(c => !c.hideClose).length > 1;
    }
    onKeyPress(event) {
        if (isKeyCodeEnter(event)) {
            this.removeAllItems();
        }
    }
    removeAllItems() {
        const removeItems = [];
        this.disclaimers.forEach(disclaimer => {
            if (!disclaimer.hideClose) {
                removeItems.push(disclaimer);
            }
        });
        removeItems.forEach(disclaimer => this.removeDisclaimer(disclaimer));
        this.emitChangeDisclaimers();
        this.removeAll.emit([...removeItems]);
    }
    removeDisclaimer(disclaimer) {
        const itemIndex = this.disclaimers.findIndex(d => d['$id'] === disclaimer['$id']);
        this.disclaimers.splice(itemIndex, 1);
    }
    checkChanges() {
        if (this.differ) {
            const changes = this.differ.diff(this.disclaimers);
            if (changes && this.disclaimersAreChanged(this.disclaimers)) {
                this.emitChangeDisclaimers();
            }
        }
        else {
            this.changeDetector?.detectChanges();
        }
    }
    checkDisclaimers(disclaimers) {
        if (Array.isArray(disclaimers)) {
            for (let i = 0; i < disclaimers.length; i++) {
                const disclaimer = disclaimers[i];
                if (disclaimer.value || disclaimer.value === 0 || disclaimer.value === false) {
                    disclaimer['$id'] = uuid();
                }
                else {
                    disclaimers.splice(i, 1);
                    i--;
                }
            }
            return disclaimers;
        }
        return [];
    }
    disclaimersAreChanged(disclaimers) {
        const currentValues = disclaimers;
        if (currentValues.length !== this.previousDisclaimers.length) {
            return true;
        }
        return currentValues.some((disclaimer, index) => disclaimer.value !== this.previousDisclaimers[index].value ||
            disclaimer.property !== this.previousDisclaimers[index].property);
    }
    emitChangeDisclaimers() {
        setTimeout(() => {
            this.change.emit(this.disclaimers);
        });
        this.previousDisclaimers = [...this._disclaimers];
        this.changeDetector?.detectChanges();
    }
}
PoDisclaimerGroupBaseComponent.ɵfac = function PoDisclaimerGroupBaseComponent_Factory(t) { return new (t || PoDisclaimerGroupBaseComponent)(i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵdirectiveInject(i1.PoLanguageService), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef)); };
PoDisclaimerGroupBaseComponent.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoDisclaimerGroupBaseComponent, inputs: { title: ["p-title", "title"], disclaimers: ["p-disclaimers", "disclaimers"], hideRemoveAll: ["p-hide-remove-all", "hideRemoveAll"] }, outputs: { change: "p-change", remove: "p-remove", removeAll: "p-remove-all" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoDisclaimerGroupBaseComponent, [{
        type: Directive
    }], function () { return [{ type: i0.IterableDiffers }, { type: i1.PoLanguageService }, { type: i0.ChangeDetectorRef }]; }, { title: [{
            type: Input,
            args: ['p-title']
        }], change: [{
            type: Output,
            args: ['p-change']
        }], remove: [{
            type: Output,
            args: ['p-remove']
        }], removeAll: [{
            type: Output,
            args: ['p-remove-all']
        }], disclaimers: [{
            type: Input,
            args: ['p-disclaimers']
        }], hideRemoveAll: [{
            type: Input,
            args: ['p-hide-remove-all']
        }] }); })();
//# sourceMappingURL=data:application/json;base64,
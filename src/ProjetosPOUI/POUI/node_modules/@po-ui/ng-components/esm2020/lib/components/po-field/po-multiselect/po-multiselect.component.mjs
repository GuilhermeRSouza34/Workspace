import { ChangeDetectionStrategy, Component, ElementRef, forwardRef, ViewChild } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { of } from 'rxjs';
import { tap, catchError } from 'rxjs/operators';
import { isMobile } from './../../../utils/util';
import { PoControlPositionService } from './../../../services/po-control-position/po-control-position.service';
import { PoKeyCodeEnum } from './../../../enums/po-key-code.enum';
import { PoMultiselectBaseComponent } from './po-multiselect-base.component';
import { PoMultiselectFilterService } from './po-multiselect-filter.service';
import * as i0 from "@angular/core";
import * as i1 from "./../../../services/po-control-position/po-control-position.service";
import * as i2 from "./po-multiselect-filter.service";
import * as i3 from "../../../services/po-language/po-language.service";
const _c0 = ["dropdownElement"];
const _c1 = ["iconElement"];
const _c2 = ["inputElement"];
function PoMultiselectComponent_span_4_Template(rf, ctx) { if (rf & 1) {
    i0.ɵɵelementStart(0, "span", 12);
    i0.ɵɵtext(1);
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = i0.ɵɵnextContext();
    i0.ɵɵadvance(1);
    i0.ɵɵtextInterpolate1(" ", ctx_r1.placeholder, " ");
} }
function PoMultiselectComponent_po_disclaimer_5_Template(rf, ctx) { if (rf & 1) {
    const _r7 = i0.ɵɵgetCurrentView();
    i0.ɵɵelementStart(0, "po-disclaimer", 13);
    i0.ɵɵlistener("click", function PoMultiselectComponent_po_disclaimer_5_Template_po_disclaimer_click_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r7); const disclaimer_r5 = restoredCtx.$implicit; const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.openDropdown(disclaimer_r5[ctx_r6.fieldValue] === "")); })("p-close-action", function PoMultiselectComponent_po_disclaimer_5_Template_po_disclaimer_p_close_action_0_listener() { const restoredCtx = i0.ɵɵrestoreView(_r7); const disclaimer_r5 = restoredCtx.$implicit; const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.closeDisclaimer(disclaimer_r5[ctx_r8.fieldValue])); });
    i0.ɵɵelementEnd();
} if (rf & 2) {
    const disclaimer_r5 = ctx.$implicit;
    const ctx_r2 = i0.ɵɵnextContext();
    i0.ɵɵclassProp("po-clickable", disclaimer_r5[ctx_r2.fieldValue] === "" && !ctx_r2.disabled);
    i0.ɵɵproperty("p-label", disclaimer_r5[ctx_r2.fieldLabel])("p-value", disclaimer_r5[ctx_r2.fieldValue])("p-hide-close", disclaimer_r5[ctx_r2.fieldValue] === "" || ctx_r2.disabled);
} }
const poMultiselectContainerOffset = 8;
const poMultiselectContainerPositionDefault = 'bottom';
/* istanbul ignore next */
const providers = [
    PoMultiselectFilterService,
    PoControlPositionService,
    {
        provide: NG_VALUE_ACCESSOR,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoMultiselectComponent),
        multi: true
    },
    {
        provide: NG_VALIDATORS,
        // eslint-disable-next-line
        useExisting: forwardRef(() => PoMultiselectComponent),
        multi: true
    }
];
/**
 * @docsExtends PoMultiselectBaseComponent
 *
 * @example
 *
 * <example name="po-multiselect-basic" title="PO Multiselect Basic">
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.html"> </file>
 *   <file name="sample-po-multiselect-basic/sample-po-multiselect-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-labs" title="PO Multiselect Labs">
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.html"> </file>
 *   <file name="sample-po-multiselect-labs/sample-po-multiselect-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation" title="PO Multiselect - Vacation">
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation/sample-po-multiselect-vacation.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-vacation-reactive-form" title="PO Multiselect - Vacation Reactive Form">
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.html"> </file>
 *   <file name="sample-po-multiselect-vacation-reactive-form/sample-po-multiselect-vacation-reactive-form.component.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-heroes" title="PO Multiselect - Heroes - using API">
 *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.component.html"> </file>
 *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.component.ts"> </file>
 *   <file name="sample-po-multiselect-heroes/sample-po-multiselect-heroes.service.ts"> </file>
 * </example>
 *
 * <example name="po-multiselect-any-array" title="PO Multiselect - Array Any">
 *   <file name="sample-po-multiselect-any-array/sample-po-multiselect-any-array.component.html"> </file>
 *   <file name="sample-po-multiselect-any-array/sample-po-multiselect-any-array.component.ts"> </file>
 * </example>
 *
 */
export class PoMultiselectComponent extends PoMultiselectBaseComponent {
    constructor(renderer, changeDetector, el, controlPosition, defaultService, languageService) {
        super(languageService);
        this.renderer = renderer;
        this.changeDetector = changeDetector;
        this.el = el;
        this.controlPosition = controlPosition;
        this.defaultService = defaultService;
        this.disclaimerOffset = 0;
        this.dropdownIcon = 'po-icon-arrow-down';
        this.dropdownOpen = false;
        this.initialized = false;
        this.visibleElement = false;
        this.isCalculateVisibleItems = true;
        this.onScroll = () => {
            this.adjustContainerPosition();
        };
    }
    ngAfterViewInit() {
        if (this.autoFocus) {
            this.focus();
        }
        this.initialized = true;
    }
    ngOnChanges(changes) {
        if (this.filterService && (changes.filterService || changes.fieldValue || changes.fieldLabel)) {
            this.setService(this.filterService);
        }
    }
    ngDoCheck() {
        const inputWidth = this.inputElement.nativeElement.offsetWidth;
        // Permite que os disclaimers sejam calculados na primeira vez que o componente torna-se visível,
        // evitando com isso, problemas com Tabs ou Divs que iniciem escondidas.
        if ((inputWidth && !this.visibleElement && this.initialized) || (inputWidth && this.isCalculateVisibleItems)) {
            this.debounceResize();
            this.visibleElement = true;
        }
    }
    ngOnDestroy() {
        this.removeListeners();
        this.getObjectsByValuesSubscription?.unsubscribe();
        this.filterSubject?.unsubscribe();
    }
    /**
     * Função que atribui foco ao componente.
     *
     * Para utilizá-la é necessário ter a instância do componente no DOM, podendo ser utilizado o ViewChild da seguinte forma:
     *
     * ```
     * import { PoMultiselectComponent } from '@po-ui/ng-components';
     *
     * ...
     *
     * @ViewChild(PoMultiselectComponent, { static: true }) multiselect: PoMultiselectComponent;
     *
     * focusMultiselect() {
     *   this.multiselect.focus();
     * }
     * ```
     */
    focus() {
        if (!this.disabled) {
            this.inputElement.nativeElement.focus();
        }
    }
    getInputWidth() {
        return this.el.nativeElement.querySelector('.po-input').offsetWidth - 40;
    }
    getDisclaimersWidth() {
        const disclaimers = this.el.nativeElement.querySelectorAll('po-disclaimer');
        return Array.from(disclaimers).map(disclaimer => disclaimer['offsetWidth']);
    }
    calculateVisibleItems() {
        const disclaimersWidth = this.getDisclaimersWidth();
        const inputWidth = this.getInputWidth();
        const extraDisclaimerSize = 38;
        const disclaimersVisible = disclaimersWidth[0];
        this.visibleDisclaimers = [];
        if (inputWidth > 0) {
            let sum = 0;
            let i = 0;
            for (i = 0; i < this.selectedOptions.length; i++) {
                sum += disclaimersWidth[i];
                this.visibleDisclaimers.push(this.selectedOptions[i]);
                if (sum > inputWidth) {
                    sum -= disclaimersWidth[i];
                    this.isCalculateVisibleItems = false;
                    break;
                }
            }
            if (disclaimersVisible || !this.selectedOptions.length) {
                if (i === this.selectedOptions.length) {
                    this.isCalculateVisibleItems = false;
                    return;
                }
                if (sum + extraDisclaimerSize > inputWidth) {
                    this.visibleDisclaimers.splice(-2, 2);
                    const label = '+' + (this.selectedOptions.length + 1 - i).toString();
                    this.visibleDisclaimers.push({ [this.fieldValue]: '', [this.fieldLabel]: label });
                }
                else {
                    this.visibleDisclaimers.splice(-1, 1);
                    const label = '+' + (this.selectedOptions.length - i).toString();
                    this.visibleDisclaimers.push({ [this.fieldValue]: '', [this.fieldLabel]: label });
                }
            }
        }
        this.changeDetector.markForCheck();
    }
    changeItems(changedItems) {
        this.updateSelectedOptions(changedItems);
        this.callOnChange(this.selectedOptions);
        if (this.autoHeight && this.dropdownOpen) {
            this.changeDetector.detectChanges();
            this.adjustContainerPosition();
        }
    }
    updateVisibleItems() {
        if (this.selectedOptions) {
            this.visibleDisclaimers = [].concat(this.selectedOptions);
        }
        this.debounceResize();
        // quando estiver dentro de modal
        if (!this.inputElement.nativeElement.offsetWidth) {
            this.isCalculateVisibleItems = true;
        }
    }
    debounceResize() {
        if (!this.autoHeight) {
            clearTimeout(this.timeoutResize);
            this.timeoutResize = setTimeout(() => {
                this.calculateVisibleItems();
            }, 200);
        }
        this.changeDetector.markForCheck();
    }
    onBlur() {
        this.onModelTouched?.();
    }
    onKeyDown(event) {
        if (event.keyCode === PoKeyCodeEnum.arrowUp || event.keyCode === PoKeyCodeEnum.arrowDown) {
            event.preventDefault();
            this.controlDropdownVisibility(true);
            return;
        }
        if (event.keyCode === PoKeyCodeEnum.tab) {
            this.controlDropdownVisibility(false);
        }
    }
    toggleDropdownVisibility() {
        if (this.disabled) {
            return;
        }
        if (this.filterService) {
            this.applyFilterInFirstClick();
        }
        this.controlDropdownVisibility(!this.dropdownOpen);
    }
    openDropdown(toOpen) {
        if (toOpen && !this.disabled) {
            this.controlDropdownVisibility(true);
        }
    }
    controlDropdownVisibility(toOpen) {
        toOpen ? this.open() : this.close();
    }
    scrollToSelectedOptions() {
        if (this.selectedOptions && this.selectedOptions.length) {
            const index = this.options.findIndex(option => option[this.fieldValue] === this.selectedOptions[0][this.fieldValue]);
            this.dropdown.scrollTo(index);
        }
    }
    setVisibleOptionsDropdown(options) {
        this.visibleOptionsDropdown = options;
        this.changeDetector.markForCheck();
    }
    changeSearch(event) {
        if (event && event[this.fieldValue] !== undefined) {
            if (this.filterService) {
                this.filterSubject.next(event[this.fieldValue]);
            }
            else {
                this.searchByLabel(event[this.fieldValue], this.options, this.filterMode);
            }
        }
        else {
            this.setVisibleOptionsDropdown(this.options);
        }
        // timeout necessário para reposicionar corretamente quando dropdown estiver pra cima do input e realizar busca no input
        setTimeout(() => this.adjustContainerPosition());
    }
    closeDisclaimer(value) {
        const index = this.selectedOptions.findIndex(option => option[this.fieldValue] === value);
        this.selectedOptions.splice(index, 1);
        this.updateVisibleItems();
        this.callOnChange(this.selectedOptions);
    }
    wasClickedOnToggle(event) {
        if (this.dropdownOpen &&
            !this.inputElement.nativeElement.contains(event.target) &&
            !this.iconElement.nativeElement.contains(event.target) &&
            !this.dropdownElement.nativeElement.contains(event.target)) {
            this.controlDropdownVisibility(false);
        }
    }
    applyFilter(value = '') {
        const param = { property: this.fieldLabel, value: value };
        return this.service.getFilteredData(param).pipe(catchError(err => {
            this.isServerSearching = false;
            return of([]);
        }), tap((options) => {
            this.setOptionsByApplyFilter(options);
        }));
    }
    applyFilterInFirstClick() {
        if (this.isFirstFilter) {
            this.isServerSearching = true;
            // necessario enviar um objeto string vazia para refazer a busca, quando alterar filterService, fieldValue e fieldLabel
            // pois temos o distinctUntilChange no pipe do filterSubject
            /* eslint-disable no-new-wrappers */
            this.filterSubject.next(new String());
        }
        else {
            this.options = [...this.cacheOptions];
        }
    }
    setOptionsByApplyFilter(items) {
        if (this.isFirstFilter) {
            this.cacheOptions = [...items];
            this.isFirstFilter = false;
        }
        this.options = [...items];
        this.setVisibleOptionsDropdown(this.options);
    }
    adjustContainerPosition() {
        this.controlPosition.adjustPosition(poMultiselectContainerPositionDefault);
    }
    close() {
        this.dropdownIcon = 'po-icon-arrow-down';
        this.dropdownOpen = false;
        this.dropdown.controlVisibility(false);
        this.setVisibleOptionsDropdown(this.options);
        this.removeListeners();
    }
    initializeListeners() {
        this.clickOutListener = this.renderer.listen('document', 'click', (event) => {
            this.wasClickedOnToggle(event);
        });
        this.resizeListener = this.renderer.listen('window', 'resize', () => {
            this.updateVisibleItems();
            isMobile() ? this.adjustContainerPosition() : this.close();
        });
        window.addEventListener('scroll', this.onScroll, true);
    }
    open() {
        this.dropdownIcon = 'po-icon-arrow-up';
        this.dropdownOpen = true;
        this.dropdown.controlVisibility(true);
        this.setVisibleOptionsDropdown(this.options);
        this.initializeListeners();
        this.scrollToSelectedOptions();
        this.changeDetector.detectChanges();
        this.setPositionDropdown();
    }
    removeListeners() {
        if (this.clickOutListener) {
            this.clickOutListener();
        }
        if (this.resizeListener) {
            this.resizeListener();
        }
        window.removeEventListener('scroll', this.onScroll, true);
        this.changeDetector.markForCheck();
    }
    setPositionDropdown() {
        this.controlPosition.setElements(this.dropdown.container.nativeElement, poMultiselectContainerOffset, this.inputElement, ['top', 'bottom'], true);
        this.adjustContainerPosition();
    }
}
PoMultiselectComponent.ɵfac = function PoMultiselectComponent_Factory(t) { return new (t || PoMultiselectComponent)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.PoControlPositionService), i0.ɵɵdirectiveInject(i2.PoMultiselectFilterService), i0.ɵɵdirectiveInject(i3.PoLanguageService)); };
PoMultiselectComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: PoMultiselectComponent, selectors: [["po-multiselect"]], viewQuery: function PoMultiselectComponent_Query(rf, ctx) { if (rf & 1) {
        i0.ɵɵviewQuery(_c0, 7, ElementRef);
        i0.ɵɵviewQuery(_c0, 7);
        i0.ɵɵviewQuery(_c1, 7, ElementRef);
        i0.ɵɵviewQuery(_c2, 7, ElementRef);
    } if (rf & 2) {
        let _t;
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdownElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.iconElement = _t.first);
        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);
    } }, features: [i0.ɵɵProvidersFeature(providers), i0.ɵɵInheritDefinitionFeature, i0.ɵɵNgOnChangesFeature], decls: 12, vars: 35, consts: [[3, "p-disabled", "p-label", "p-optional", "p-required", "p-show-required"], [1, "po-field-container-content"], [1, "po-input", "po-input-icon-right", "po-multiselect-input", "po-clickable", 3, "tabindex", "keyup.enter", "keydown", "click", "blur"], ["inputElement", ""], ["class", "po-multiselect-input-placeholder", 4, "ngIf"], ["class", "po-multiselect-input-disclaimer", 3, "p-label", "p-value", "p-hide-close", "po-clickable", "click", "p-close-action", 4, "ngFor", "ngForOf"], [1, "po-field-icon-container-right"], [3, "ngClass"], ["iconElement", ""], [3, "p-searching", "p-hide-search", "p-hide-select-all", "p-literals", "p-options", "p-visible-options", "p-selected-options", "p-placeholder-search", "p-field-value", "p-field-label", "p-change", "p-change-search", "p-close-dropdown"], ["dropdownElement", ""], [3, "p-help", "p-disabled"], [1, "po-multiselect-input-placeholder"], [1, "po-multiselect-input-disclaimer", 3, "p-label", "p-value", "p-hide-close", "click", "p-close-action"]], template: function PoMultiselectComponent_Template(rf, ctx) { if (rf & 1) {
        i0.ɵɵelementStart(0, "po-field-container", 0)(1, "div", 1)(2, "div", 2, 3);
        i0.ɵɵlistener("keyup.enter", function PoMultiselectComponent_Template_div_keyup_enter_2_listener() { return ctx.toggleDropdownVisibility(); })("keydown", function PoMultiselectComponent_Template_div_keydown_2_listener($event) { return ctx.onKeyDown($event); })("click", function PoMultiselectComponent_Template_div_click_2_listener() { return ctx.toggleDropdownVisibility(); })("blur", function PoMultiselectComponent_Template_div_blur_2_listener() { return ctx.onBlur(); });
        i0.ɵɵtemplate(4, PoMultiselectComponent_span_4_Template, 2, 1, "span", 4);
        i0.ɵɵtemplate(5, PoMultiselectComponent_po_disclaimer_5_Template, 1, 5, "po-disclaimer", 5);
        i0.ɵɵelementStart(6, "div", 6);
        i0.ɵɵelement(7, "span", 7, 8);
        i0.ɵɵelementEnd()()();
        i0.ɵɵelementStart(9, "po-multiselect-dropdown", 9, 10);
        i0.ɵɵlistener("p-change", function PoMultiselectComponent_Template_po_multiselect_dropdown_p_change_9_listener($event) { return ctx.changeItems($event); })("p-change-search", function PoMultiselectComponent_Template_po_multiselect_dropdown_p_change_search_9_listener($event) { return ctx.changeSearch($event); })("p-close-dropdown", function PoMultiselectComponent_Template_po_multiselect_dropdown_p_close_dropdown_9_listener() { return ctx.controlDropdownVisibility(false); });
        i0.ɵɵelementEnd();
        i0.ɵɵelement(11, "po-field-container-bottom", 11);
        i0.ɵɵelementEnd();
    } if (rf & 2) {
        i0.ɵɵproperty("p-disabled", ctx.disabled)("p-label", ctx.label)("p-optional", ctx.optional)("p-required", ctx.required)("p-show-required", ctx.showRequired);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-multiselect-show", ctx.dropdownOpen);
        i0.ɵɵadvance(1);
        i0.ɵɵclassProp("po-multiselect-input-auto", ctx.autoHeight)("po-multiselect-input-static", !ctx.autoHeight)("po-multiselect-input-disabled", ctx.disabled);
        i0.ɵɵproperty("tabindex", ctx.disabled ? -1 : 0);
        i0.ɵɵattribute("disabled", ctx.disabled)("aria-label", ctx.label);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("ngIf", ctx.placeholder && !ctx.disabled && !(ctx.visibleDisclaimers == null ? null : ctx.visibleDisclaimers.length));
        i0.ɵɵadvance(1);
        i0.ɵɵproperty("ngForOf", ctx.visibleDisclaimers);
        i0.ɵɵadvance(2);
        i0.ɵɵclassMapInterpolate2("po-icon po-field-icon ", ctx.dropdownIcon, " ", ctx.disabled ? "po-icon-input-disabled" : "po-icon-input", "");
        i0.ɵɵproperty("ngClass", ctx.disabled ? "po-field-icon-disabled" : "");
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-searching", ctx.isServerSearching)("p-hide-search", ctx.hideSearch)("p-hide-select-all", ctx.hideSelectAll)("p-literals", ctx.literals)("p-options", ctx.options)("p-visible-options", ctx.visibleOptionsDropdown)("p-selected-options", ctx.selectedOptions)("p-placeholder-search", ctx.placeholderSearch)("p-field-value", ctx.fieldValue)("p-field-label", ctx.fieldLabel);
        i0.ɵɵadvance(2);
        i0.ɵɵproperty("p-help", ctx.help)("p-disabled", ctx.disabled);
    } }, encapsulation: 2, changeDetection: 0 });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoMultiselectComponent, [{
        type: Component,
        args: [{ selector: 'po-multiselect', changeDetection: ChangeDetectionStrategy.OnPush, providers: providers, template: "<po-field-container\n  [p-disabled]=\"disabled\"\n  [p-label]=\"label\"\n  [p-optional]=\"optional\"\n  [p-required]=\"required\"\n  [p-show-required]=\"showRequired\"\n>\n  <div class=\"po-field-container-content\" [class.po-multiselect-show]=\"dropdownOpen\">\n    <div\n      #inputElement\n      [tabindex]=\"disabled ? -1 : 0\"\n      [attr.disabled]=\"disabled\"\n      [attr.aria-label]=\"label\"\n      class=\"po-input po-input-icon-right po-multiselect-input po-clickable\"\n      [class.po-multiselect-input-auto]=\"autoHeight\"\n      [class.po-multiselect-input-static]=\"!autoHeight\"\n      [class.po-multiselect-input-disabled]=\"disabled\"\n      (keyup.enter)=\"toggleDropdownVisibility()\"\n      (keydown)=\"onKeyDown($event)\"\n      (click)=\"toggleDropdownVisibility()\"\n      (blur)=\"onBlur()\"\n    >\n      <span *ngIf=\"placeholder && !disabled && !visibleDisclaimers?.length\" class=\"po-multiselect-input-placeholder\">\n        {{ placeholder }}\n      </span>\n\n      <po-disclaimer\n        *ngFor=\"let disclaimer of visibleDisclaimers\"\n        class=\"po-multiselect-input-disclaimer\"\n        [p-label]=\"disclaimer[fieldLabel]\"\n        [p-value]=\"disclaimer[fieldValue]\"\n        [p-hide-close]=\"disclaimer[fieldValue] === '' || disabled\"\n        [class.po-clickable]=\"disclaimer[fieldValue] === '' && !disabled\"\n        (click)=\"openDropdown(disclaimer[fieldValue] === '')\"\n        (p-close-action)=\"closeDisclaimer(disclaimer[fieldValue])\"\n      >\n      </po-disclaimer>\n\n      <div class=\"po-field-icon-container-right\">\n        <span\n          #iconElement\n          class=\"po-icon po-field-icon {{ dropdownIcon }} {{ disabled ? 'po-icon-input-disabled' : 'po-icon-input' }}\"\n          [ngClass]=\"disabled ? 'po-field-icon-disabled' : ''\"\n        >\n        </span>\n      </div>\n    </div>\n  </div>\n\n  <po-multiselect-dropdown\n    #dropdownElement\n    [p-searching]=\"isServerSearching\"\n    [p-hide-search]=\"hideSearch\"\n    [p-hide-select-all]=\"hideSelectAll\"\n    [p-literals]=\"literals\"\n    [p-options]=\"options\"\n    [p-visible-options]=\"visibleOptionsDropdown\"\n    [p-selected-options]=\"selectedOptions\"\n    [p-placeholder-search]=\"placeholderSearch\"\n    [p-field-value]=\"fieldValue\"\n    [p-field-label]=\"fieldLabel\"\n    (p-change)=\"changeItems($event)\"\n    (p-change-search)=\"changeSearch($event)\"\n    (p-close-dropdown)=\"controlDropdownVisibility(false)\"\n  >\n  </po-multiselect-dropdown>\n\n  <po-field-container-bottom [p-help]=\"help\" [p-disabled]=\"disabled\"></po-field-container-bottom>\n</po-field-container>\n" }]
    }], function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i1.PoControlPositionService }, { type: i2.PoMultiselectFilterService }, { type: i3.PoLanguageService }]; }, { dropdownElement: [{
            type: ViewChild,
            args: ['dropdownElement', { read: ElementRef, static: true }]
        }], dropdown: [{
            type: ViewChild,
            args: ['dropdownElement', { static: true }]
        }], iconElement: [{
            type: ViewChild,
            args: ['iconElement', { read: ElementRef, static: true }]
        }], inputElement: [{
            type: ViewChild,
            args: ['inputElement', { read: ElementRef, static: true }]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,
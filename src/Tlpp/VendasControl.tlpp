#include "tlpp-core.th"
#include "tlpp-rest.th"

namespace vendas

/*/{Protheus.doc} VendasControl
Classe para gerenciamento de vendas
@type class
@author Guilherme Souza
@since 2025
/*/
class VendasControl
    private
        data cCliente as character
        data cProduto as character
        data nQuantidade as numeric
        data nPrecoUnit as numeric
        data nTotal as numeric
        data cPedido as character
        data oEstoque as object

    public
        method new() as object
        method setCliente(cCli as character) as logical
        method setProduto(cProd as character, nQuant as numeric, nPreco as numeric) as logical
        method validarEstoque() as logical
        method validarCredito() as logical
        method gravarPedido() as logical
        method getDados() as array
endclass

method new() as object
    ::oEstoque := estoque.GerenciaEstoque():new("", 0, "S")
return self

method setCliente(cCli as character) as logical
    local lRet := .T.

    if empty(cCli)
        UserException("Cliente nao pode ser vazio")
    endif

    ::cCliente := cCli

return lRet

method setProduto(cProd as character, nQuant as numeric, nPreco as numeric) as logical
    local lRet := .T.

    if empty(cProd)
        UserException("Produto nao pode ser vazio")
    endif

    if nQuant <= 0
        UserException("Quantidade deve ser maior que zero")
    endif

    if nPreco <= 0
        UserException("Preco deve ser maior que zero")
    endif

    ::cProduto := cProd
    ::nQuantidade := nQuant
    ::nPrecoUnit := nPreco
    ::nTotal := nQuant * nPreco

return lRet

method validarEstoque() as logical
    local lRet := .T.
    local aSaldo := array(0)

    // Verifica saldo em estoque
    if Select("SB2") == 0
        UserException("Tabela de saldos nao esta aberta")
    endif

    SB2->(dbSetOrder(1))
    if !SB2->(dbSeek(xFilial("SB2") + ::cProduto))
        UserException("Produto nao encontrado no estoque")
    endif

    if SB2->B2_QATU < ::nQuantidade
        UserException("Saldo insuficiente em estoque")
    endif

return lRet

method validarCredito() as logical
    local lRet := .T.
    local nLimite := 0

    // Verifica limite de credito do cliente
    if Select("SA1") == 0
        UserException("Tabela de clientes nao esta aberta")
    endif

    SA1->(dbSetOrder(1))
    if !SA1->(dbSeek(xFilial("SA1") + ::cCliente))
        UserException("Cliente nao encontrado")
    endif

    nLimite := SA1->A1_LC
    if nLimite < ::nTotal
        UserException("Cliente sem limite de credito suficiente")
    endif

return lRet

method gravarPedido() as logical
    local lRet := .T.
    local cNumPed := ""

    begin transaction
        try
            // Gera numero do pedido
            cNumPed := GetSXENum("SC5", "C5_NUM")
            ::cPedido := cNumPed

            // Grava cabe�alho do pedido
            if RecLock("SC5", .T.)
                SC5->C5_FILIAL := xFilial("SC5")
                SC5->C5_NUM    := cNumPed
                SC5->C5_CLIENTE := ::cCliente
                SC5->C5_EMISSAO := Date()
                SC5->C5_CONDPAG := "001"
                MsUnlock()
            else
                UserException("Erro ao bloquear registro de pedido")
            endif

            // Grava item do pedido
            if RecLock("SC6", .T.)
                SC6->C6_FILIAL  := xFilial("SC6")
                SC6->C6_NUM     := cNumPed
                SC6->C6_ITEM    := "01"
                SC6->C6_PRODUTO := ::cProduto
                SC6->C6_QTDVEN  := ::nQuantidade
                SC6->C6_PRCVEN  := ::nPrecoUnit
                SC6->C6_VALOR   := ::nTotal
                MsUnlock()
            else
                UserException("Erro ao bloquear registro de item")
            endif

            // Atualiza estoque
            ::oEstoque:setProduto(::cProduto)
            ::oEstoque:setQuantidade(::nQuantidade)
            if !::oEstoque:movimentar()
                UserException("Erro ao atualizar estoque")
            endif

            ConfirmSX8()
            end transaction

        catch oError
            RollBackSX8()
            discard transaction
            lRet := .F.
            UserException(oError:Description)
        endtry

return lRet

method getDados() as array
    local aDados := array(6)

    aDados[1] := ::cCliente
    aDados[2] := ::cProduto
    aDados[3] := ::nQuantidade
    aDados[4] := ::nPrecoUnit
    aDados[5] := ::nTotal
    aDados[6] := ::cPedido

return aDados

/*/{Protheus.doc} RealizarVenda
Funcao principal para interface com usuario
@type function
@author Guilherme Souza
@since 2025
/*/
user function RealizarVenda()
    local cCliente as character
    local cProduto as character
    local nQuantidade as numeric
    local nPrecoUnit as numeric
    local oVendas as object
    local aDados as array

    // Interface com usuario
    @ 01, 01 say "Codigo do Cliente: " get cCliente
    @ 02, 01 say "Codigo do Produto: " get cProduto
    @ 03, 01 say "Quantidade: " get nQuantidade picture "@E 999999.99"
    @ 04, 01 say "Preco Unitario: " get nPrecoUnit picture "@E 999999.99"
    read

    try
        // Cria objeto e realiza venda
        oVendas := vendas.VendasControl():new()
        
        // Executa o fluxo de venda de forma sequencial
        if !ProcessarVenda(oVendas, cCliente, cProduto, nQuantidade, nPrecoUnit)
            return
        endif

        // Obtém os dados da venda e exibe mensagem de sucesso
        aDados := oVendas:getDados()
        MsgInfo("Venda realizada com sucesso. Pedido: " + aDados[6], "Sucesso")

    catch oError
        MsgStop(oError:Description, "Erro")
    endtry

return

/*/{Protheus.doc} ProcessarVenda
Funcao auxiliar para processar o fluxo de venda
@type function
@param oVendas, object, Objeto de controle de vendas
@param cCliente, character, Codigo do cliente
@param cProduto, character, Codigo do produto
@param nQuantidade, numeric, Quantidade vendida
@param nPrecoUnit, numeric, Preco unitario
@return logical, Indica se o processamento foi bem sucedido
@author Guilherme Souza
@since 2025
/*/
static function ProcessarVenda(oVendas, cCliente, cProduto, nQuantidade, nPrecoUnit)
    // Valida��o do cliente
    if !oVendas:setCliente(cCliente)
        return .F.
    endif

    // Valida��o do produto
    if !oVendas:setProduto(cProduto, nQuantidade, nPrecoUnit)
        return .F.
    endif

    // Valida��o do estoque
    if !oVendas:validarEstoque()
        return .F.
    endif

    // Valida��o do credito
    if !oVendas:validarCredito()
        return .F.
    endif

    // Grava��o do pedido
    if !oVendas:gravarPedido()
        return .F.
    endif

return .T.

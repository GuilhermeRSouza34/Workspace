import { Directive, HostListener } from '@angular/core';
import { PoTooltipBaseDirective } from './po-tooltip-base.directive';
import { PoTooltipControlPositionService } from './po-tooltip-control-position.service';
import * as i0 from "@angular/core";
import * as i1 from "./po-tooltip-control-position.service";
const nativeElements = ['input', 'button'];
/**
 * @docsExtends PoTooltipBaseDirective
 *
 * @example
 *
 * <example name="po-tooltip-basic" title="PO Tooltip Basic" >
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.html"> </file>
 *  <file name="sample-po-tooltip-basic/sample-po-tooltip-basic.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-labs" title="PO Tooltip Labs" >
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.html"> </file>
 *  <file name="sample-po-tooltip-labs/sample-po-tooltip-labs.component.ts"> </file>
 * </example>
 *
 * <example name="po-tooltip-new-user" title="PO Tooltip - New User" >
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.html"> </file>
 *  <file name="sample-po-tooltip-new-user/sample-po-tooltip-new-user.component.ts"> </file>
 * </example>
 *
 */
export class PoTooltipDirective extends PoTooltipBaseDirective {
    constructor(elementRef, renderer, poControlPosition) {
        super();
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.poControlPosition = poControlPosition;
        this.tooltipOffset = 8;
    }
    onMouseEnter() {
        if (!this.displayTooltip) {
            this.addTooltipAction();
        }
    }
    onMouseLeave() {
        if (!this.displayTooltip) {
            this.removeTooltipAction();
        }
    }
    onMouseClick() {
        if (!this.displayTooltip) {
            this.removeTooltipAction();
        }
    }
    onFocusOut() {
        if (!this.displayTooltip) {
            this.removeTooltipAction();
        }
    }
    onFocusIn() {
        if (!this.displayTooltip) {
            this.addTooltipAction();
        }
    }
    onKeyDown(event) {
        if (!this.displayTooltip && (event.code === 'Escape' || event.keyCode === 27)) {
            this.removeTooltipAction();
        }
    }
    ngOnInit() {
        this.initScrollEventListenerFunction();
    }
    addTooltipAction() {
        setTimeout(() => {
            if (this.tooltip) {
                this.tooltipContent ? this.showTooltip() : this.createTooltip();
                this.removeArrow(this.arrowDirection);
                this.poControlPosition.adjustPosition(this.tooltipPosition);
                this.arrowDirection = this.poControlPosition.getArrowDirection();
                this.addArrow(this.arrowDirection);
                this.lastTooltipText = this.tooltip;
            }
        });
    }
    removeTooltipAction() {
        // necessita do timeout para conseguir adicionar ".po-invisible", pois quando tem alguns elementos
        // próximos com tooltips e ficar passando o mouse em cima, os mesmos não estavam ficando invisiveis.
        setTimeout(() => {
            if (this.appendInBody && this.tooltipContent) {
                this.renderer.removeChild(document.body, this.tooltipContent);
                this.tooltipContent = undefined;
            }
            else {
                this.hideTooltip();
            }
        });
    }
    addArrow(arrowDirection) {
        this.renderer.addClass(this.divArrow, `po-arrow-${arrowDirection}`);
    }
    addScrollEventListener() {
        window.addEventListener('scroll', this.eventListenerFunction, true);
    }
    // Monta a estrutura do tooltip
    createTooltip() {
        this.tooltipContent = this.renderer.createElement('div');
        this.renderer.addClass(this.tooltipContent, 'po-tooltip');
        this.renderer.setStyle(this.tooltipContent, 'transition', 'visibility .3s, opacity .3s linear');
        this.renderer.setStyle(this.tooltipContent, 'opacity', 0.9);
        this.insertAriaLabelTooltip();
        this.divArrow = this.renderer.createElement('div');
        this.renderer.addClass(this.divArrow, 'po-tooltip-arrow');
        this.divContent = this.renderer.createElement('div');
        this.renderer.addClass(this.divContent, 'po-tooltip-content');
        this.textContent = this.renderer.createText(this.tooltip);
        this.renderer.appendChild(this.divContent, this.textContent);
        this.renderer.appendChild(this.tooltipContent, this.divArrow);
        this.renderer.appendChild(this.tooltipContent, this.divContent);
        const parentTarget = this.appendInBody ? document.body : this.elementRef.nativeElement;
        this.renderer.appendChild(parentTarget, this.tooltipContent);
        this.poControlPosition.setElements(this.tooltipContent, this.tooltipOffset, this.elementRef);
        this.addScrollEventListener();
    }
    initScrollEventListenerFunction() {
        this.eventListenerFunction = () => {
            if (!this.isHidden) {
                setTimeout(() => {
                    this.poControlPosition.adjustPosition(this.tooltipPosition);
                });
            }
        };
    }
    hideTooltip() {
        if (this.tooltipContent) {
            this.renderer.setStyle(this.tooltipContent, 'opacity', 0);
            this.renderer.setStyle(this.tooltipContent, 'visibility', 'hidden');
            this.isHidden = true;
            this.removeScrollEventListener();
        }
    }
    removeArrow(arrowDirection) {
        if (this.elementRef.nativeElement.querySelector(`.po-arrow-${arrowDirection}`)) {
            this.renderer.removeClass(this.divArrow, `po-arrow-${arrowDirection}`);
        }
    }
    removeScrollEventListener() {
        window.removeEventListener('scroll', this.eventListenerFunction, true);
    }
    showTooltip() {
        this.renderer.setStyle(this.tooltipContent, 'opacity', 0.9);
        this.renderer.setStyle(this.tooltipContent, 'visibility', 'visible');
        this.updateTextContent();
        this.isHidden = false;
        this.addScrollEventListener();
    }
    updateTextContent() {
        const checkRepeatedText = this.tooltip.split('\n');
        if (this.lastTooltipText !== this.tooltip && checkRepeatedText[0] !== this.lastTooltipText) {
            this.renderer.removeChild(this.divContent, this.textContent);
            this.textContent = this.renderer.createText(this.tooltip);
            this.renderer.appendChild(this.divContent, this.textContent);
        }
    }
    insertAriaLabelTooltip() {
        const nativeTextContent = this.elementRef.nativeElement.textContent;
        let targetElement = '';
        nativeElements.forEach(el => {
            if (this.elementRef.nativeElement.getElementsByTagName(el)[0] !== undefined) {
                targetElement = el;
            }
        });
        if (this.elementRef.nativeElement.getElementsByTagName(targetElement)[0] && this.tooltip) {
            this.renderer.setAttribute(this.elementRef.nativeElement.getElementsByTagName(targetElement)[0], 'aria-label', nativeTextContent + ' ' + this.tooltip);
        }
    }
}
PoTooltipDirective.ɵfac = function PoTooltipDirective_Factory(t) { return new (t || PoTooltipDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i1.PoTooltipControlPositionService)); };
PoTooltipDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: PoTooltipDirective, selectors: [["", "p-tooltip", ""]], hostBindings: function PoTooltipDirective_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("mouseenter", function PoTooltipDirective_mouseenter_HostBindingHandler() { return ctx.onMouseEnter(); })("mouseleave", function PoTooltipDirective_mouseleave_HostBindingHandler() { return ctx.onMouseLeave(); })("click", function PoTooltipDirective_click_HostBindingHandler() { return ctx.onMouseClick(); })("focusout", function PoTooltipDirective_focusout_HostBindingHandler() { return ctx.onFocusOut(); })("focusin", function PoTooltipDirective_focusin_HostBindingHandler() { return ctx.onFocusIn(); })("keydown", function PoTooltipDirective_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } }, features: [i0.ɵɵProvidersFeature([PoTooltipControlPositionService]), i0.ɵɵInheritDefinitionFeature] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(PoTooltipDirective, [{
        type: Directive,
        args: [{
                selector: '[p-tooltip]',
                providers: [PoTooltipControlPositionService]
            }]
    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: i1.PoTooltipControlPositionService }]; }, { onMouseEnter: [{
            type: HostListener,
            args: ['mouseenter']
        }], onMouseLeave: [{
            type: HostListener,
            args: ['mouseleave']
        }], onMouseClick: [{
            type: HostListener,
            args: ['click']
        }], onFocusOut: [{
            type: HostListener,
            args: ['focusout']
        }], onFocusIn: [{
            type: HostListener,
            args: ['focusin']
        }], onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,
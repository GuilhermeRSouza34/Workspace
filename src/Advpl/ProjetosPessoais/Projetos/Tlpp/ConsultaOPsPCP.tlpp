// ConsultaOPsPCP.tlpp
// Consulta e exportação de Ordens de Produção do SIGAPCP

@Rest
class ConsultaOPsPCP {
    @Get("/consulta-ops-pcp")
    action consultaOPs(params) {
        // Parâmetros: produto, status, dataDe, dataAte
        const { produto, status, dataDe, dataAte } = params;
        let query = `
            SELECT C7_NUM, C7_PRODUTO, B1_DESC, C7_QUANT, C7_QUJE, C7_DATPRF, C7_DATRF, C7_SITUAC, C7_LOCAL, C7_OP, C7_EMISSAO
            FROM SC7
            INNER JOIN SB1 ON C7_PRODUTO = B1_COD
            WHERE C7.D_E_L_E_T_ = ''
                ${produto ? `AND C7_PRODUTO = '${produto}'` : ''}
                ${status ? `AND C7_SITUAC = '${status}'` : ''}
                ${dataDe ? `AND C7_EMISSAO >= '${dataDe}'` : ''}
                ${dataAte ? `AND C7_EMISSAO <= '${dataAte}'` : ''}
            ORDER BY C7_NUM DESC
        `;
        const ops = QuerySql(query);
        return ops;
    }

    @Post("/consulta-ops-pcp/exporta")
    action exportaOPsExcel(body) {
        const { ops } = body;
        if (!ops || ops.length === 0) {
            return { erro: 'Nenhuma OP para exportar.' };
        }
        const XLSX = require('xlsx');
        const ws = XLSX.utils.json_to_sheet(ops);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, 'OPsPCP');
        const filePath = './OPsPCP_' + (new Date().toISOString().slice(0,10)) + '.xlsx';
        XLSX.writeFile(wb, filePath);
        return { sucesso: true, arquivo: filePath };
    }
}

/*
 * =====================================================================
 *  GESTAOPAVANCADO.TLPP
 *  Sistema Avançado de Gestão de Ordens de Produção para Protheus PCP
 *  Desenvolvido para uso corporativo, com robustez, performance e integração
 *  Autor: Sistema PCP Avançado
 *  Data: 2025-08-04
 *  Descrição: Controle completo de OPs, materiais, apontamentos, workflow e análises
 *  Versão: 1.0 - Partes 1 e 2: Consulta, Dashboard, Materiais e Apontamentos
 * =====================================================================
 */

@Rest
class GestaoOPAvancado {

    // =====================================================================
    // PARTE 1: CONSULTA AVANÇADA DE ORDENS DE PRODUÇÃO
    // =====================================================================
    
    /*
     * Consulta robusta de OPs com filtros avançados, paginação e validações
     * Parâmetros: op, produto, status, dataIni, dataFim, centro, recurso, prioridade
     * Retorna: lista paginada, totalizadores, logs e análises de performance
     */
    @Get("/pcp/ops/consulta")
    action consultaOPs(params)
        Local cOP, cProduto, cStatus, dDataIni, dDataFim, cCentro, cRecurso, cPrioridade
        Local nPage, nPageSize, cOrderBy, cOrderDir, aWhere, cWhere, nOffset
        Local cQuery, cCountQuery, aItens, aCount, nTotal, aEstatisticas, oLog
        Local lErro, cErro, aDados, nI
        
        // Inicialização e validação de parâmetros
        cOP         := AllTrim(Iif(!Empty(params["op"]), params["op"], ""))
        cProduto    := AllTrim(Iif(!Empty(params["produto"]), params["produto"], ""))
        cStatus     := AllTrim(Iif(!Empty(params["status"]), params["status"], ""))
        dDataIni    := Iif(!Empty(params["dataIni"]), SToD(StrTran(params["dataIni"],"-","")), SToD(""))
        dDataFim    := Iif(!Empty(params["dataFim"]), SToD(StrTran(params["dataFim"],"-","")), SToD(""))
        cCentro     := AllTrim(Iif(!Empty(params["centro"]), params["centro"], ""))
        cRecurso    := AllTrim(Iif(!Empty(params["recurso"]), params["recurso"], ""))
        cPrioridade := AllTrim(Iif(!Empty(params["prioridade"]), params["prioridade"], ""))
        nPage       := Iif(!Empty(params["page"]), Val(params["page"]), 1)
        nPageSize   := Iif(!Empty(params["pageSize"]), Val(params["pageSize"]), 30)
        cOrderBy    := Iif(!Empty(params["orderBy"]), params["orderBy"], "C2_NUM")
        cOrderDir   := Iif(!Empty(params["orderDir"]), params["orderDir"], "DESC")
        
        // Validações de negócio
        If nPageSize > 500
            Return { "sucesso" => .F., "erro" => "Limite máximo de 500 registros por página." }
        EndIf
        If !Empty(dDataIni) .And. !Empty(dDataFim) .And. dDataFim < dDataIni
            Return { "sucesso" => .F., "erro" => "Data final deve ser maior que data inicial." }
        EndIf
        
        // Construção dinâmica do WHERE
        aWhere := { "C2.D_E_L_E_T_ = ''" }
        If !Empty(cOP)
            aAdd(aWhere, "C2_NUM LIKE '%" + cOP + "%'")
        EndIf
        If !Empty(cProduto)
            aAdd(aWhere, "C2_PRODUTO LIKE '%" + cProduto + "%'")
        EndIf
        If !Empty(cStatus)
            aAdd(aWhere, "C2_TPOP = '" + cStatus + "'")
        EndIf
        If !Empty(dDataIni)
            aAdd(aWhere, "C2_EMISSAO >= '" + DToS(dDataIni) + "'")
        EndIf
        If !Empty(dDataFim)
            aAdd(aWhere, "C2_EMISSAO <= '" + DToS(dDataFim) + "'")
        EndIf
        If !Empty(cCentro)
            aAdd(aWhere, "C2_CC = '" + cCentro + "'")
        EndIf
        If !Empty(cRecurso)
            aAdd(aWhere, "C2_RECURSO = '" + cRecurso + "'")
        EndIf
        If !Empty(cPrioridade)
            aAdd(aWhere, "C2_PRIOR = '" + cPrioridade + "'")
        EndIf
        
        cWhere := ""
        If Len(aWhere) > 0
            cWhere := " WHERE " + ArrayToStr(aWhere, " AND ")
        EndIf
        
        nOffset := (nPage - 1) * nPageSize
        
        // Query principal com JOINs para dados completos
        cQuery := "SELECT C2_NUM, C2_ITEM, C2_SEQUEN, C2_PRODUTO, B1_DESC, C2_QUANT, " +;
                 "C2_QUJE, C2_PERDA, C2_EMISSAO, C2_DATPRI, C2_DATPRF, C2_TPOP, " +;
                 "C2_CC, C2_RECURSO, C2_PRIOR, C2_LOCAL, C2_OBS, " +;
                 "CASE WHEN C2_QUJE >= C2_QUANT THEN 'FINALIZADA' " +;
                 "     WHEN C2_QUJE > 0 THEN 'EM_ANDAMENTO' " +;
                 "     ELSE 'PENDENTE' END AS STATUS_CALC " +;
                 "FROM SC2010 C2 " +;
                 "LEFT JOIN SB1010 B1 ON C2_PRODUTO = B1_COD AND B1.D_E_L_E_T_ = '' " +;
                 cWhere + " " +;
                 "ORDER BY " + cOrderBy + " " + cOrderDir + " " +;
                 "OFFSET " + AllTrim(Str(nOffset)) + " ROWS FETCH NEXT " + AllTrim(Str(nPageSize)) + " ROWS ONLY"
        
        // Query de contagem
        cCountQuery := "SELECT COUNT(*) AS TOTAL FROM SC2010 C2 " + cWhere
        
        // Inicialização de controle de erro e log
        lErro := .F.
        cErro := ""
        oLog := { "acao" => "consultaOPs", "parametros" => params, "data" => DToS(Date()), "hora" => Time() }
        aEstatisticas := {}
        
        // Execução com tratamento de erro
        Begin Sequence
            aItens := QuerySql(cQuery)
            aCount := QuerySql(cCountQuery)
            nTotal := Iif(!Empty(aCount), aCount[1]["TOTAL"], 0)
            
            // Cálculo de estatísticas adicionais
            aEstatisticas := This:calculaEstatisticasOPs(aItens)
            
        Recover Using oErr
            lErro := .T.
            cErro := "Erro na consulta: " + oErr:Description
            aItens := {}
            nTotal := 0
        End Sequence
        
        // Log da operação
        This:registraLogPCP("consultaOPs", "API", oLog, !lErro)
        
        If lErro
            Return { "sucesso" => .F., "erro" => cErro, "dados" => {}, "total" => 0, "page" => nPage, "pageSize" => nPageSize }
        EndIf
        
        Return { "sucesso" => .T., "dados" => aItens, "total" => nTotal, "page" => nPage, "pageSize" => nPageSize, "estatisticas" => aEstatisticas }

    // =====================================================================
    // DASHBOARD EXECUTIVO DE PRODUÇÃO
    // =====================================================================
    
    /*
     * Dashboard com KPIs, gráficos e análises de produção em tempo real
     * Calcula indicadores de performance, gargalos e tendências
     */
    @Get("/pcp/dashboard")
    action dashboardProducao(params)
        Local nTotalOPs, nOPsPendentes, nOPsAndamento, nOPsFinalizadas, nOPsAtrasadas
        Local nPercentualConclusao, nMediaDiasProduzir, aGargalos, aProdutividadeCentros
        Local aPrioridadeCritica, aEvolucaoMensal, aTop10Produtos, aIndicadores
        Local cQuery, aDados, nI, dHoje, nDias, cCentro, nQtdAtrasada
        Local nPerformanceGeral, aCurvaABC, aMateriais, lErro, cErro
        
        dHoje := Date()
        nDias := Iif(!Empty(params["periodo"]), Val(params["periodo"]), 30)
        lErro := .F.
        cErro := ""
        
        Begin Sequence
            // KPI 1: Total de OPs ativas
            cQuery := "SELECT COUNT(*) AS TOTAL FROM SC2010 WHERE D_E_L_E_T_ = '' AND C2_TPOP <> 'S'"
            aDados := QuerySql(cQuery)
            nTotalOPs := Iif(!Empty(aDados), aDados[1]["TOTAL"], 0)
            
            // KPI 2: OPs por status
            cQuery := "SELECT " +;
                     "SUM(CASE WHEN C2_QUJE = 0 THEN 1 ELSE 0 END) AS PENDENTES, " +;
                     "SUM(CASE WHEN C2_QUJE > 0 AND C2_QUJE < C2_QUANT THEN 1 ELSE 0 END) AS ANDAMENTO, " +;
                     "SUM(CASE WHEN C2_QUJE >= C2_QUANT THEN 1 ELSE 0 END) AS FINALIZADAS " +;
                     "FROM SC2010 WHERE D_E_L_E_T_ = '' AND C2_TPOP <> 'S'"
            aDados := QuerySql(cQuery)
            If !Empty(aDados)
                nOPsPendentes := aDados[1]["PENDENTES"]
                nOPsAndamento := aDados[1]["ANDAMENTO"]
                nOPsFinalizadas := aDados[1]["FINALIZADAS"]
            Else
                nOPsPendentes := nOPsAndamento := nOPsFinalizadas := 0
            EndIf
            
            // KPI 3: OPs atrasadas
            cQuery := "SELECT COUNT(*) AS ATRASADAS FROM SC2010 " +;
                     "WHERE D_E_L_E_T_ = '' AND C2_TPOP <> 'S' AND C2_DATPRF < '" + DToS(dHoje) + "' AND C2_QUJE < C2_QUANT"
            aDados := QuerySql(cQuery)
            nOPsAtrasadas := Iif(!Empty(aDados), aDados[1]["ATRASADAS"], 0)
            
            // KPI 4: Percentual de conclusão geral
            nPercentualConclusao := Iif(nTotalOPs > 0, Round((nOPsFinalizadas / nTotalOPs) * 100, 2), 0)
            
            // KPI 5: Análise de gargalos por centro de custo
            cQuery := "SELECT C2_CC, COUNT(*) AS QTD_OPS, " +;
                     "AVG(DATEDIFF(day, CONVERT(date, C2_DATPRI), CONVERT(date, C2_DATPRF))) AS DIAS_MEDIO " +;
                     "FROM SC2010 WHERE D_E_L_E_T_ = '' AND C2_TPOP <> 'S' " +;
                     "GROUP BY C2_CC ORDER BY QTD_OPS DESC"
            aGargalos := QuerySql(cQuery)
            
            // KPI 6: Produtividade por centro
            cQuery := "SELECT C2_CC, SUM(C2_QUJE) AS PRODUZIDO, SUM(C2_QUANT) AS PLANEJADO " +;
                     "FROM SC2010 WHERE D_E_L_E_T_ = '' AND C2_EMISSAO >= '" + DToS(dHoje - nDias) + "' " +;
                     "GROUP BY C2_CC ORDER BY PRODUZIDO DESC"
            aProdutividadeCentros := QuerySql(cQuery)
            
            // KPI 7: OPs de prioridade crítica
            cQuery := "SELECT C2_NUM, C2_PRODUTO, B1_DESC, C2_QUANT, C2_QUJE, C2_DATPRF " +;
                     "FROM SC2010 C2 LEFT JOIN SB1010 B1 ON C2_PRODUTO = B1_COD AND B1.D_E_L_E_T_ = '' " +;
                     "WHERE C2.D_E_L_E_T_ = '' AND C2_PRIOR = '1' AND C2_QUJE < C2_QUANT " +;
                     "ORDER BY C2_DATPRF"
            aPrioridadeCritica := QuerySql(cQuery)
            
            // KPI 8: Top 10 produtos mais produzidos
            cQuery := "SELECT TOP 10 C2_PRODUTO, B1_DESC, SUM(C2_QUJE) AS TOTAL_PRODUZIDO " +;
                     "FROM SC2010 C2 LEFT JOIN SB1010 B1 ON C2_PRODUTO = B1_COD AND B1.D_E_L_E_T_ = '' " +;
                     "WHERE C2.D_E_L_E_T_ = '' AND C2_EMISSAO >= '" + DToS(dHoje - nDias) + "' " +;
                     "GROUP BY C2_PRODUTO, B1_DESC ORDER BY TOTAL_PRODUZIDO DESC"
            aTop10Produtos := QuerySql(cQuery)
            
            // Performance geral (OEE simplificado)
            nPerformanceGeral := This:calculaOEESimplificado()
            
        Recover Using oErr
            lErro := .T.
            cErro := "Erro ao gerar dashboard: " + oErr:Description
        End Sequence
        
        If lErro
            Return { "sucesso" => .F., "erro" => cErro }
        EndIf
        
        // Montagem do retorno estruturado
        aIndicadores := {;
            "totalOPs" => nTotalOPs,;
            "pendentes" => nOPsPendentes,;
            "emAndamento" => nOPsAndamento,;
            "finalizadas" => nOPsFinalizadas,;
            "atrasadas" => nOPsAtrasadas,;
            "percentualConclusao" => nPercentualConclusao,;
            "performanceGeral" => nPerformanceGeral;
        }
        
        This:registraLogPCP("dashboardProducao", "API", { "periodo" => nDias }, .T.)
        
        Return {;
            "sucesso" => .T.,;
            "indicadores" => aIndicadores,;
            "gargalos" => aGargalos,;
            "produtividadeCentros" => aProdutividadeCentros,;
            "prioridadeCritica" => aPrioridadeCritica,;
            "top10Produtos" => aTop10Produtos,;
            "dataAtualizacao" => DToS(Date()) + " " + Time();
        }

    // =====================================================================
    // FUNÇÕES AUXILIARES DA PARTE 1
    // =====================================================================
    
    /*
     * Calcula estatísticas detalhadas das OPs consultadas
     */
    calculaEstatisticasOPs(aItens)
        Local aStats, nI, nTotalPlanejado, nTotalProduzido, nTotalPerda
        Local nOPsNovaas, nOPsVencidas, dItem
        
        nTotalPlanejado := nTotalProduzido := nTotalPerda := 0
        nOPsNovaas := nOPsVencidas := 0
        
        For nI := 1 To Len(aItens)
            nTotalPlanejado += aItens[nI]["C2_QUANT"]
            nTotalProduzido += aItens[nI]["C2_QUJE"]
            nTotalPerda += aItens[nI]["C2_PERDA"]
            
            dItem := SToD(aItens[nI]["C2_EMISSAO"])
            If dItem >= (Date() - 7)
                nOPsNovaas++
            EndIf
            
            dItem := SToD(aItens[nI]["C2_DATPRF"])
            If dItem < Date() .And. aItens[nI]["C2_QUJE"] < aItens[nI]["C2_QUANT"]
                nOPsVencidas++
            EndIf
        Next
        
        aStats := {;
            "totalPlanejado" => nTotalPlanejado,;
            "totalProduzido" => nTotalProduzido,;
            "totalPerda" => nTotalPerda,;
            "eficiencia" => Iif(nTotalPlanejado > 0, Round((nTotalProduzido/nTotalPlanejado)*100, 2), 0),;
            "opsNovas" => nOPsNovaas,;
            "opsVencidas" => nOPsVencidas;
        }
        
        Return aStats

    /*
     * Cálculo simplificado de OEE (Overall Equipment Effectiveness)
     */
    calculaOEESimplificado()
        Local cQuery, aDados, nDisponibilidade, nPerformance, nQualidade, nOEE
        
        // Simplificação: usar dados das últimas 4 semanas
        cQuery := "SELECT " +;
                 "AVG(CASE WHEN C2_QUJE >= C2_QUANT THEN 100.0 ELSE (C2_QUJE/C2_QUANT)*100.0 END) AS PERFORMANCE, " +;
                 "AVG(CASE WHEN C2_PERDA = 0 THEN 100.0 ELSE ((C2_QUJE-C2_PERDA)/C2_QUJE)*100.0 END) AS QUALIDADE " +;
                 "FROM SC2010 WHERE D_E_L_E_T_ = '' AND C2_EMISSAO >= '" + DToS(Date() - 28) + "'"
        
        aDados := QuerySql(cQuery)
        If !Empty(aDados)
            nDisponibilidade := 85  // Valor padrão estimado
            nPerformance := Iif(aDados[1]["PERFORMANCE"] != Nil, aDados[1]["PERFORMANCE"], 0)
            nQualidade := Iif(aDados[1]["QUALIDADE"] != Nil, aDados[1]["QUALIDADE"], 0)
            nOEE := Round((nDisponibilidade * nPerformance * nQualidade) / 10000, 2)
        Else
            nOEE := 0
        EndIf
        
        Return nOEE

    /*
     * Registra logs específicos do módulo PCP
     */
    registraLogPCP(cAcao, cUsuario, oDetalhes, lSucesso)
        Local file, fs, all, oLog
        
        file := "./logs_pcp.json"
        all := {}
        
        If File(file)
            fs := MemoRead(file)
            all := JsonDecode(fs)
        EndIf
        
        oLog := {;
            "acao" => cAcao,;
            "usuario" => cUsuario,;
            "detalhes" => oDetalhes,;
            "sucesso" => lSucesso,;
            "data" => DToS(Date()),;
            "hora" => Time(),;
            "timestamp" => FWTimeStamp(3);
        }
        
        aAdd(all, oLog)
        
        // Manter apenas os últimos 1000 logs
        If Len(all) > 1000
            aDel(all, 1)
            aSize(all, 999)
        EndIf
        
        MemoWrite(file, JsonEncode(all))
        
        Return .T.

    // =====================================================================
    // PARTE 2: CONTROLE DE MATERIAIS E APONTAMENTOS DE PRODUÇÃO
    // =====================================================================
    
    /*
     * Consulta detalhada de materiais necessários para uma OP
     * Inclui saldo disponível, reservas, empenhos e sugestões de compra
     */
    @Get("/pcp/op/:numero/materiais")
    action consultaMateriaisOP(params)
        Local cNumOP, cQuery, aMateriaisOP, aMateriais, nI, oMaterial
        Local nSaldoDisponivel, nReservado, nEmpenhado, nNecessario, cStatus
        Local aFornecedores, aSugestoes, lErro, cErro, oLog
        
        cNumOP := AllTrim(params["numero"])
        lErro := .F.
        cErro := ""
        aMateriais := {}
        aSugestoes := {}
        
        If Empty(cNumOP)
            Return { "sucesso" => .F., "erro" => "Número da OP é obrigatório." }
        EndIf
        
        oLog := { "acao" => "consultaMateriaisOP", "op" => cNumOP, "data" => DToS(Date()), "hora" => Time() }
        
        Begin Sequence
            // Busca estrutura de materiais da OP
            cQuery := "SELECT G1_COD, G1_COMP, B1_DESC, G1_QUANT, G1_PERDA, G1_REVINI, G1_REVFIM, " +;
                     "G1_INI, G1_FIM, G1_FIXVAR, G1_GROPC, G1_OPC " +;
                     "FROM SG1010 G1 " +;
                     "INNER JOIN SB1010 B1 ON G1_COMP = B1_COD AND B1.D_E_L_E_T_ = '' " +;
                     "INNER JOIN SC2010 C2 ON G1_COD = C2_PRODUTO AND C2.D_E_L_E_T_ = '' " +;
                     "WHERE G1.D_E_L_E_T_ = '' AND C2_NUM = '" + cNumOP + "' " +;
                     "ORDER BY G1_TRT"
            aMateriaisOP := QuerySql(cQuery)
            
            For nI := 1 To Len(aMateriaisOP)
                // Calcula necessidade real baseada na quantidade da OP
                cQuery := "SELECT C2_QUANT, C2_QUJE FROM SC2010 WHERE D_E_L_E_T_ = '' AND C2_NUM = '" + cNumOP + "'"
                aDados := QuerySql(cQuery)
                nNecessario := Iif(!Empty(aDados), (aDados[1]["C2_QUANT"] - aDados[1]["C2_QUJE"]) * aMateriaisOP[nI]["G1_QUANT"], 0)
                
                // Verifica saldo disponível
                cQuery := "SELECT SUM(B2_QATU) AS SALDO FROM SB2010 " +;
                         "WHERE D_E_L_E_T_ = '' AND B2_COD = '" + aMateriaisOP[nI]["G1_COMP"] + "'"
                aDados := QuerySql(cQuery)
                nSaldoDisponivel := Iif(!Empty(aDados), aDados[1]["SALDO"], 0)
                
                // Verifica empenhos existentes
                cQuery := "SELECT SUM(D4_QUANT - D4_QTDEENT) AS EMPENHADO FROM SD4010 " +;
                         "WHERE D_E_L_E_T_ = '' AND D4_COD = '" + aMateriaisOP[nI]["G1_COMP"] + "' AND D4_OP = '" + cNumOP + "'"
                aDados := QuerySql(cQuery)
                nEmpenhado := Iif(!Empty(aDados), aDados[1]["EMPENHADO"], 0)
                
                // Define status do material
                If nSaldoDisponivel >= nNecessario
                    cStatus := "DISPONIVEL"
                ElseIf nSaldoDisponivel > 0
                    cStatus := "PARCIAL"
                Else
                    cStatus := "INDISPONIVEL"
                EndIf
                
                // Busca fornecedores preferenciais
                aFornecedores := This:buscaFornecedoresPreferenciais(aMateriaisOP[nI]["G1_COMP"])
                
                oMaterial := {;
                    "codigo" => aMateriaisOP[nI]["G1_COMP"],;
                    "descricao" => aMateriaisOP[nI]["B1_DESC"],;
                    "quantidadeNecessaria" => nNecessario,;
                    "saldoDisponivel" => nSaldoDisponivel,;
                    "quantidadeEmpenhada" => nEmpenhado,;
                    "quantidadeFaltante" => Max(0, nNecessario - nSaldoDisponivel),;
                    "status" => cStatus,;
                    "fornecedores" => aFornecedores,;
                    "perda" => aMateriaisOP[nI]["G1_PERDA"];
                }
                
                aAdd(aMateriais, oMaterial)
                
                // Gera sugestões de compra para materiais em falta
                If nSaldoDisponivel < nNecessario
                    aAdd(aSugestoes, This:geraSugestaoCompra(aMateriaisOP[nI]["G1_COMP"], nNecessario - nSaldoDisponivel, aFornecedores))
                EndIf
            Next
            
        Recover Using oErr
            lErro := .T.
            cErro := "Erro ao consultar materiais da OP: " + oErr:Description
        End Sequence
        
        This:registraLogPCP("consultaMateriaisOP", "API", oLog, !lErro)
        
        If lErro
            Return { "sucesso" => .F., "erro" => cErro }
        EndIf
        
        Return {;
            "sucesso" => .T.,;
            "op" => cNumOP,;
            "materiais" => aMateriais,;
            "totalMateriais" => Len(aMateriais),;
            "sugestoesCompra" => aSugestoes;
        }

    /*
     * Realiza apontamento de produção com validações robustas
     * Controla quantidade produzida, refugo, tempo de produção e recursos
     */
    @Post("/pcp/op/apontamento")
    action apontamentoProducao(body)
        Local cNumOP, cItem, cSequencia, nQuantidade, nRefugo, cRecurso, cOperador
        Local dDataIni, cHoraIni, dDataFim, cHoraFim, cObservacoes, nTempoSetup, nTempoProducao
        Local cQuery, aDados, nQtdPlanejada, nQtdJaProduzida, nQtdDisponivel, lOk
        Local lErro, cErro, oLog, aValidacoes, nIndice, cMsgValidacao
        
        // Extração e validação de parâmetros
        cNumOP        := AllTrim(body["numeroOP"])
        cItem         := AllTrim(body["item"])
        cSequencia    := AllTrim(body["sequencia"])
        nQuantidade   := Val(body["quantidade"])
        nRefugo       := Val(Iif(body["refugo"] != Nil, body["refugo"], "0"))
        cRecurso      := AllTrim(body["recurso"])
        cOperador     := AllTrim(body["operador"])
        dDataIni      := SToD(StrTran(body["dataInicio"], "-", ""))
        cHoraIni      := body["horaInicio"]
        dDataFim      := SToD(StrTran(body["dataFim"], "-", ""))
        cHoraFim      := body["horaFim"]
        cObservacoes  := body["observacoes"]
        nTempoSetup   := Val(Iif(body["tempoSetup"] != Nil, body["tempoSetup"], "0"))
        nTempoProducao:= Val(Iif(body["tempoProducao"] != Nil, body["tempoProducao"], "0"))
        
        lErro := .F.
        cErro := ""
        aValidacoes := {}
        
        // Validações obrigatórias
        If Empty(cNumOP)
            aAdd(aValidacoes, "Número da OP é obrigatório")
        EndIf
        If nQuantidade <= 0
            aAdd(aValidacoes, "Quantidade deve ser maior que zero")
        EndIf
        If Empty(cRecurso)
            aAdd(aValidacoes, "Recurso é obrigatório")
        EndIf
        If Empty(cOperador)
            aAdd(aValidacoes, "Operador é obrigatório")
        EndIf
        If Empty(dDataIni) .Or. Empty(dDataFim)
            aAdd(aValidacoes, "Datas de início e fim são obrigatórias")
        EndIf
        If dDataFim < dDataIni
            aAdd(aValidacoes, "Data fim deve ser maior ou igual à data início")
        EndIf
        
        If Len(aValidacoes) > 0
            cMsgValidacao := ""
            For nIndice := 1 To Len(aValidacoes)
                cMsgValidacao += aValidacoes[nIndice] + "; "
            Next
            Return { "sucesso" => .F., "erro" => "Validações: " + cMsgValidacao }
        EndIf
        
        oLog := { "acao" => "apontamentoProducao", "op" => cNumOP, "quantidade" => nQuantidade, "operador" => cOperador, "data" => DToS(Date()), "hora" => Time() }
        
        Begin Sequence
            // Verifica se a OP existe e está liberada
            cQuery := "SELECT C2_QUANT, C2_QUJE, C2_TPOP, C2_PRODUTO FROM SC2010 " +;
                     "WHERE D_E_L_E_T_ = '' AND C2_NUM = '" + cNumOP + "'"
            aDados := QuerySql(cQuery)
            
            If Empty(aDados)
                lErro := .T.
                cErro := "OP não encontrada: " + cNumOP
            Else
                nQtdPlanejada := aDados[1]["C2_QUANT"]
                nQtdJaProduzida := aDados[1]["C2_QUJE"]
                nQtdDisponivel := nQtdPlanejada - nQtdJaProduzida
                
                If aDados[1]["C2_TPOP"] == "S"
                    lErro := .T.
                    cErro := "OP já está encerrada"
                ElseIf nQuantidade > nQtdDisponivel
                    lErro := .T.
                    cErro := "Quantidade a produzir (" + AllTrim(Str(nQuantidade)) + ") maior que disponível (" + AllTrim(Str(nQtdDisponivel)) + ")"
                EndIf
            EndIf
            
            If !lErro
                // Verifica disponibilidade do recurso
                If !This:verificaDisponibilidadeRecurso(cRecurso, dDataIni, cHoraIni, dDataFim, cHoraFim)
                    lErro := .T.
                    cErro := "Recurso " + cRecurso + " não disponível no período informado"
                EndIf
            EndIf
            
            If !lErro
                // Atualiza quantidade produzida na OP
                cQuery := "UPDATE SC2010 SET C2_QUJE = C2_QUJE + " + AllTrim(Str(nQuantidade)) + ", " +;
                         "C2_PERDA = C2_PERDA + " + AllTrim(Str(nRefugo)) + " " +;
                         "WHERE D_E_L_E_T_ = '' AND C2_NUM = '" + cNumOP + "'"
                lOk := ExecSql(cQuery)
                
                If lOk
                    // Registra o apontamento detalhado
                    This:registraApontamentoDetalhado(cNumOP, cItem, cSequencia, nQuantidade, nRefugo, cRecurso, cOperador, dDataIni, cHoraIni, dDataFim, cHoraFim, cObservacoes, nTempoSetup, nTempoProducao)
                    
                    // Atualiza status do recurso
                    This:atualizaStatusRecurso(cRecurso, "OCUPADO", cNumOP)
                    
                    // Verifica se OP foi finalizada
                    If (nQtdJaProduzida + nQuantidade) >= nQtdPlanejada
                        This:finalizarOP(cNumOP)
                    EndIf
                Else
                    lErro := .T.
                    cErro := "Falha ao atualizar quantidade produzida na OP"
                EndIf
            EndIf
            
        Recover Using oErr
            lErro := .T.
            cErro := "Erro no apontamento: " + oErr:Description
        End Sequence
        
        This:registraLogPCP("apontamentoProducao", cOperador, oLog, !lErro)
        
        If lErro
            Return { "sucesso" => .F., "erro" => cErro }
        EndIf
        
        Return { "sucesso" => .T., "mensagem" => "Apontamento realizado com sucesso", "novaQuantidadeProduzida" => nQtdJaProduzida + nQuantidade }

    /*
     * Controle de recursos de produção (máquinas, operadores, ferramentas)
     * Permite reserva, ocupação e liberação de recursos
     */
    @Get("/pcp/recursos/status")
    action statusRecursos(params)
        Local cTipoRecurso, dDataConsulta, aRecursos, cQuery, aDados, nI, oRecurso
        Local cStatus, cOPAtual, nPercentualUso, aHistorico, lErro, cErro
        
        cTipoRecurso := Iif(!Empty(params["tipo"]), params["tipo"], "")
        dDataConsulta := Iif(!Empty(params["data"]), SToD(StrTran(params["data"], "-", "")), Date())
        lErro := .F.
        cErro := ""
        aRecursos := {}
        
        Begin Sequence
            // Busca recursos cadastrados
            cQuery := "SELECT H1_CODIGO, H1_DESCRI, H1_TIPO, H1_CENTRO, H1_ATIVO " +;
                     "FROM SH1010 WHERE D_E_L_E_T_ = ''"
            
            If !Empty(cTipoRecurso)
                cQuery += " AND H1_TIPO = '" + cTipoRecurso + "'"
            EndIf
            
            cQuery += " ORDER BY H1_CODIGO"
            aDados := QuerySql(cQuery)
            
            For nI := 1 To Len(aDados)
                // Verifica status atual do recurso
                cStatus := This:verificaStatusRecurso(aDados[nI]["H1_CODIGO"], dDataConsulta)
                cOPAtual := This:buscaOPAtualRecurso(aDados[nI]["H1_CODIGO"])
                nPercentualUso := This:calculaPercentualUsoRecurso(aDados[nI]["H1_CODIGO"], dDataConsulta)
                aHistorico := This:buscaHistoricoRecurso(aDados[nI]["H1_CODIGO"], dDataConsulta)
                
                oRecurso := {;
                    "codigo" => aDados[nI]["H1_CODIGO"],;
                    "descricao" => aDados[nI]["H1_DESCRI"],;
                    "tipo" => aDados[nI]["H1_TIPO"],;
                    "centro" => aDados[nI]["H1_CENTRO"],;
                    "ativo" => aDados[nI]["H1_ATIVO"] == "1",;
                    "status" => cStatus,;
                    "opAtual" => cOPAtual,;
                    "percentualUso" => nPercentualUso,;
                    "historico" => aHistorico;
                }
                
                aAdd(aRecursos, oRecurso)
            Next
            
        Recover Using oErr
            lErro := .T.
            cErro := "Erro ao consultar recursos: " + oErr:Description
        End Sequence
        
        If lErro
            Return { "sucesso" => .F., "erro" => cErro }
        EndIf
        
        Return {;
            "sucesso" => .T.,;
            "recursos" => aRecursos,;
            "totalRecursos" => Len(aRecursos),;
            "dataConsulta" => DToS(dDataConsulta);
        }

    /*
     * Empenho automático de materiais para OP
     * Valida disponibilidade e gera empenhos no SD4
     */
    @Post("/pcp/op/:numero/empenhar")
    action empenharMateriaisOP(params)
        Local cNumOP, aMateriaisOP, nI, cMaterial, nQuantidade, nSaldoDisp, lOk
        Local cQuery, aDados, aEmpenhos, aFalhas, oEmpenho, lErro, cErro, oLog
        
        cNumOP := AllTrim(params["numero"])
        lErro := .F.
        cErro := ""
        aEmpenhos := {}
        aFalhas := {}
        
        If Empty(cNumOP)
            Return { "sucesso" => .F., "erro" => "Número da OP é obrigatório." }
        EndIf
        
        oLog := { "acao" => "empenharMateriaisOP", "op" => cNumOP, "data" => DToS(Date()), "hora" => Time() }
        
        Begin Sequence
            // Busca materiais da estrutura da OP
            cQuery := "SELECT G1_COMP, G1_QUANT FROM SG1010 G1 " +;
                     "INNER JOIN SC2010 C2 ON G1_COD = C2_PRODUTO AND C2.D_E_L_E_T_ = '' " +;
                     "WHERE G1.D_E_L_E_T_ = '' AND C2_NUM = '" + cNumOP + "'"
            aMateriaisOP := QuerySql(cQuery)
            
            For nI := 1 To Len(aMateriaisOP)
                cMaterial := aMateriaisOP[nI]["G1_COMP"]
                nQuantidade := aMateriaisOP[nI]["G1_QUANT"]
                
                // Verifica saldo disponível
                cQuery := "SELECT SUM(B2_QATU) AS SALDO FROM SB2010 " +;
                         "WHERE D_E_L_E_T_ = '' AND B2_COD = '" + cMaterial + "'"
                aDados := QuerySql(cQuery)
                nSaldoDisp := Iif(!Empty(aDados), aDados[1]["SALDO"], 0)
                
                If nSaldoDisp >= nQuantidade
                    // Gera empenho
                    lOk := This:gerarEmpenho(cNumOP, cMaterial, nQuantidade)
                    If lOk
                        oEmpenho := { "material" => cMaterial, "quantidade" => nQuantidade, "status" => "EMPENHADO" }
                        aAdd(aEmpenhos, oEmpenho)
                    Else
                        oEmpenho := { "material" => cMaterial, "quantidade" => nQuantidade, "status" => "ERRO_EMPENHO" }
                        aAdd(aFalhas, oEmpenho)
                    EndIf
                Else
                    oEmpenho := { "material" => cMaterial, "quantidade" => nQuantidade, "saldoDisponivel" => nSaldoDisp, "status" => "SALDO_INSUFICIENTE" }
                    aAdd(aFalhas, oEmpenho)
                EndIf
            Next
            
        Recover Using oErr
            lErro := .T.
            cErro := "Erro ao empenhar materiais: " + oErr:Description
        End Sequence
        
        This:registraLogPCP("empenharMateriaisOP", "API", oLog, !lErro)
        
        If lErro
            Return { "sucesso" => .F., "erro" => cErro }
        EndIf
        
        Return {;
            "sucesso" => .T.,;
            "op" => cNumOP,;
            "empenhosRealizados" => aEmpenhos,;
            "falhasEmpenho" => aFalhas,;
            "totalEmpenhos" => Len(aEmpenhos),;
            "totalFalhas" => Len(aFalhas);
        }

    // =====================================================================
    // FUNÇÕES AUXILIARES DA PARTE 2
    // =====================================================================
    
    /*
     * Busca fornecedores preferenciais para um produto
     */
    buscaFornecedoresPreferenciais(cProduto)
        Local cQuery, aDados, aFornecedores, nI, oFornecedor
        
        aFornecedores := {}
        cQuery := "SELECT A5_FORNECE, A5_LOJA, A2_NOME, A5_CODPRF, A5_PRECO1 " +;
                 "FROM SA5010 A5 " +;
                 "INNER JOIN SA2010 A2 ON A5_FORNECE = A2_COD AND A5_LOJA = A2_LOJA AND A2.D_E_L_E_T_ = '' " +;
                 "WHERE A5.D_E_L_E_T_ = '' AND A5_PRODUTO = '" + cProduto + "' " +;
                 "ORDER BY A5_PRECO1"
        
        aDados := QuerySql(cQuery)
        For nI := 1 To Len(aDados)
            oFornecedor := {;
                "codigo" => aDados[nI]["A5_FORNECE"],;
                "loja" => aDados[nI]["A5_LOJA"],;
                "nome" => aDados[nI]["A2_NOME"],;
                "codigoProdutoFornecedor" => aDados[nI]["A5_CODPRF"],;
                "preco" => aDados[nI]["A5_PRECO1"];
            }
            aAdd(aFornecedores, oFornecedor)
        Next
        
        Return aFornecedores

    /*
     * Gera sugestão de compra para material em falta
     */
    geraSugestaoCompra(cMaterial, nQuantidadeFaltante, aFornecedores)
        Local oSugestao, dDataSugerida, nLeadTime, cFornecedorSugerido, nPrecoSugerido
        
        dDataSugerida := Date() + 1
        nLeadTime := 5  // Lead time padrão
        cFornecedorSugerido := ""
        nPrecoSugerido := 0
        
        If Len(aFornecedores) > 0
            cFornecedorSugerido := aFornecedores[1]["codigo"] + "/" + aFornecedores[1]["loja"]
            nPrecoSugerido := aFornecedores[1]["preco"]
        EndIf
        
        oSugestao := {;
            "material" => cMaterial,;
            "quantidadeSugerida" => nQuantidadeFaltante,;
            "fornecedorSugerido" => cFornecedorSugerido,;
            "precoUnitario" => nPrecoSugerido,;
            "valorTotal" => nQuantidadeFaltante * nPrecoSugerido,;
            "dataSugerida" => DToS(dDataSugerida),;
            "leadTime" => nLeadTime;
        }
        
        Return oSugestao

    /*
     * Verifica disponibilidade do recurso em um período
     */
    verificaDisponibilidadeRecurso(cRecurso, dDataIni, cHoraIni, dDataFim, cHoraFim)
        Local cQuery, aDados, lDisponivel
        
        // Verifica se o recurso está livre no período
        cQuery := "SELECT COUNT(*) AS OCUPADO FROM APONTAMENTOS_RECURSOS " +;
                 "WHERE RECURSO = '" + cRecurso + "' " +;
                 "AND ((DATA_INI <= '" + DToS(dDataIni) + "' AND DATA_FIM >= '" + DToS(dDataIni) + "') " +;
                 "OR (DATA_INI <= '" + DToS(dDataFim) + "' AND DATA_FIM >= '" + DToS(dDataFim) + "'))"
        
        aDados := QuerySql(cQuery)
        lDisponivel := Iif(!Empty(aDados), aDados[1]["OCUPADO"] == 0, .T.)
        
        Return lDisponivel

    /*
     * Registra apontamento detalhado em arquivo JSON
     */
    registraApontamentoDetalhado(cNumOP, cItem, cSequencia, nQuantidade, nRefugo, cRecurso, cOperador, dDataIni, cHoraIni, dDataFim, cHoraFim, cObservacoes, nTempoSetup, nTempoProducao)
        Local file, fs, all, oApontamento
        
        file := "./apontamentos_producao.json"
        all := {}
        
        If File(file)
            fs := MemoRead(file)
            all := JsonDecode(fs)
        EndIf
        
        oApontamento := {;
            "numeroOP" => cNumOP,;
            "item" => cItem,;
            "sequencia" => cSequencia,;
            "quantidade" => nQuantidade,;
            "refugo" => nRefugo,;
            "recurso" => cRecurso,;
            "operador" => cOperador,;
            "dataInicio" => DToS(dDataIni),;
            "horaInicio" => cHoraIni,;
            "dataFim" => DToS(dDataFim),;
            "horaFim" => cHoraFim,;
            "observacoes" => cObservacoes,;
            "tempoSetup" => nTempoSetup,;
            "tempoProducao" => nTempoProducao,;
            "timestamp" => FWTimeStamp(3);
        }
        
        aAdd(all, oApontamento)
        MemoWrite(file, JsonEncode(all))
        
        Return .T.

    /*
     * Atualiza status do recurso
     */
    atualizaStatusRecurso(cRecurso, cStatus, cOP)
        Local file, fs, all, oStatus, nI, lAchou
        
        file := "./status_recursos.json"
        all := {}
        lAchou := .F.
        
        If File(file)
            fs := MemoRead(file)
            all := JsonDecode(fs)
        EndIf
        
        // Procura se já existe status para o recurso
        For nI := 1 To Len(all)
            If all[nI]["recurso"] == cRecurso
                all[nI]["status"] := cStatus
                all[nI]["op"] := cOP
                all[nI]["dataAtualizacao"] := DToS(Date())
                all[nI]["horaAtualizacao"] := Time()
                lAchou := .T.
                Exit
            EndIf
        Next
        
        // Se não encontrou, adiciona novo
        If !lAchou
            oStatus := {;
                "recurso" => cRecurso,;
                "status" => cStatus,;
                "op" => cOP,;
                "dataAtualizacao" => DToS(Date()),;
                "horaAtualizacao" => Time();
            }
            aAdd(all, oStatus)
        EndIf
        
        MemoWrite(file, JsonEncode(all))
        Return .T.

    /*
     * Finaliza OP automaticamente
     */
    finalizarOP(cNumOP)
        Local cQuery, lOk
        
        cQuery := "UPDATE SC2010 SET C2_TPOP = 'S', C2_DATRF = '" + DToS(Date()) + "' " +;
                 "WHERE D_E_L_E_T_ = '' AND C2_NUM = '" + cNumOP + "'"
        
        lOk := ExecSql(cQuery)
        
        If lOk
            // Libera recursos da OP
            This:liberarRecursosOP(cNumOP)
            
            // Registra log de finalização
            This:registraLogPCP("finalizarOP", "SISTEMA", { "op" => cNumOP }, .T.)
        EndIf
        
        Return lOk

    /*
     * Verifica status atual do recurso
     */
    verificaStatusRecurso(cRecurso, dData)
        Local file, fs, all, nI, cStatus
        
        file := "./status_recursos.json"
        cStatus := "LIVRE"
        
        If File(file)
            fs := MemoRead(file)
            all := JsonDecode(fs)
            
            For nI := 1 To Len(all)
                If all[nI]["recurso"] == cRecurso
                    cStatus := all[nI]["status"]
                    Exit
                EndIf
            Next
        EndIf
        
        Return cStatus

    /*
     * Busca OP atual do recurso
     */
    buscaOPAtualRecurso(cRecurso)
        Local file, fs, all, nI, cOP
        
        file := "./status_recursos.json"
        cOP := ""
        
        If File(file)
            fs := MemoRead(file)
            all := JsonDecode(fs)
            
            For nI := 1 To Len(all)
                If all[nI]["recurso"] == cRecurso
                    cOP := all[nI]["op"]
                    Exit
                EndIf
            Next
        EndIf
        
        Return cOP

    /*
     * Calcula percentual de uso do recurso
     */
    calculaPercentualUsoRecurso(cRecurso, dData)
        Local file, fs, all, nI, nTotalHoras, nHorasUsadas, nPercentual
        
        file := "./apontamentos_producao.json"
        nTotalHoras := 8  // 8 horas padrão por dia
        nHorasUsadas := 0
        
        If File(file)
            fs := MemoRead(file)
            all := JsonDecode(fs)
            
            For nI := 1 To Len(all)
                If all[nI]["recurso"] == cRecurso .And. all[nI]["dataInicio"] == DToS(dData)
                    nHorasUsadas += all[nI]["tempoProducao"] / 60  // Converte minutos para horas
                EndIf
            Next
        EndIf
        
        nPercentual := Iif(nTotalHoras > 0, Round((nHorasUsadas / nTotalHoras) * 100, 2), 0)
        
        Return nPercentual

    /*
     * Busca histórico do recurso
     */
    buscaHistoricoRecurso(cRecurso, dData)
        Local file, fs, all, nI, aHistorico, oItem
        
        file := "./apontamentos_producao.json"
        aHistorico := {}
        
        If File(file)
            fs := MemoRead(file)
            all := JsonDecode(fs)
            
            For nI := 1 To Len(all)
                If all[nI]["recurso"] == cRecurso .And. all[nI]["dataInicio"] == DToS(dData)
                    oItem := {;
                        "op" => all[nI]["numeroOP"],;
                        "quantidade" => all[nI]["quantidade"],;
                        "operador" => all[nI]["operador"],;
                        "horaInicio" => all[nI]["horaInicio"],;
                        "horaFim" => all[nI]["horaFim"];
                    }
                    aAdd(aHistorico, oItem)
                EndIf
            Next
        EndIf
        
        Return aHistorico

    /*
     * Gera empenho de material
     */
    gerarEmpenho(cOP, cMaterial, nQuantidade)
        Local cQuery, lOk
        
        // Simulação de geração de empenho - em ambiente real usaria ExecAuto
        cQuery := "INSERT INTO SD4010 (D4_FILIAL, D4_OP, D4_COD, D4_QUANT, D4_DATA) " +;
                 "VALUES ('01', '" + cOP + "', '" + cMaterial + "', " + AllTrim(Str(nQuantidade)) + ", '" + DToS(Date()) + "')"
        
        lOk := ExecSql(cQuery)
        
        Return lOk

    /*
     * Libera recursos da OP
     */
    liberarRecursosOP(cOP)
        Local file, fs, all, nI
        
        file := "./status_recursos.json"
        
        If File(file)
            fs := MemoRead(file)
            all := JsonDecode(fs)
            
            For nI := 1 To Len(all)
                If all[nI]["op"] == cOP
                    all[nI]["status"] := "LIVRE"
                    all[nI]["op"] := ""
                    all[nI]["dataAtualizacao"] := DToS(Date())
                    all[nI]["horaAtualizacao"] := Time()
                EndIf
            Next
            
            MemoWrite(file, JsonEncode(all))
        EndIf
        
        Return .T.
}
